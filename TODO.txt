=> Нужно чтобы при оформлении заказ сумма заказа сверялась с балансом юзера

=> Баланс юзера берется с JSON => https://protaxi-market.uz/module/shop/api/check-id?id=111

=> Т.е нужно перед оформлением проводить условие если сумма заказа строго меньше или равно балансу юзера то заказ оформляется

=> если сумма больше баланса то не оформляется

=> если заказ не оформляется то должна выходить ошибка "У вас недостаточно балов для оформления заказа. Попробуйте удалить из корзины некоторые товары и попробуйте снова."

/////////////////////////////////////////////

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    try:
        chat_id = call.message.chat.id
        message_id = call.message.message_id
        user_id = call.from_user.id

        # Получаем язык пользователя, по умолчанию русский
        user_language = db.get_user_language(user_id) or 'ru'

        async def get_user_balance(protaxi_id):
            try:
                async with aiohttp.ClientSession() as session:
                    async with session.get(f"{Config.CHECK_ID_URL}?id={protaxi_id}") as response:
                        if response.status == 200:
                            data = await response.json()
                            return data.get('balance', 0)
                        return 0
            except Exception as e:
                logger.error(f"Error getting user balance: {e}")
                return 0

        if call.data == "main_menu":
            try:
                bot.edit_message_text(
                    Languages.get_string(user_language, 'main_menu'),
                    chat_id,
                    message_id,
                    reply_markup=Keyboard.main_menu(user_language)
                )
            except telebot.apihelper.ApiException:
                bot.send_message(
                    chat_id,
                    Languages.get_string(user_language, 'main_menu'),
                    reply_markup=Keyboard.main_menu(user_language)
                )

        elif call.data == "categories":
            categories = fetch_all_categories()
            if not categories:
                bot.answer_callback_query(
                    call.id,
                    Languages.get_string(user_language, 'categories_unavailable')
                )
                return

            markup = types.InlineKeyboardMarkup(row_width=1)
            for category in categories:
                category_button = types.InlineKeyboardButton(
                    category['name'],
                    callback_data=f"show_products_{category['id']}"
                )
                markup.add(category_button)
            markup.add(
                types.InlineKeyboardButton(
                    Languages.get_string(user_language, 'back'),
                    callback_data="main_menu"
                )
            )

            try:
                bot.edit_message_text(
                    Languages.get_string(user_language, 'categories'),
                    chat_id,
                    message_id,
                    reply_markup=markup
                )
            except telebot.apihelper.ApiException:
                bot.send_message(
                    chat_id,
                    Languages.get_string(user_language, 'categories'),
                    reply_markup=markup
                )

        elif call.data.startswith("show_products_"):
            category_id = call.data.split("_")[2]
            products = asyncio.run(fetch_products_by_category(category_id))

            if not products:
                bot.edit_message_text(
                    Languages.get_string(user_language, 'no_products_in_category'),
                    chat_id,
                    message_id,
                    reply_markup=Keyboard.main_menu(user_language)
                )
                return

            bot.delete_message(chat_id, message_id)

            for product in products:
                try:
                    text = Languages.get_string(user_language, 'product_template').format(
                        product['name'],
                        product['price'],
                        product['currency']
                    )
                    markup = types.InlineKeyboardMarkup(row_width=2)
                    markup.add(
                        types.InlineKeyboardButton(
                            Languages.get_string(user_language, 'add_to_cart'),
                            callback_data=f"add_{category_id}_{product['id']}"
                        ),
                        types.InlineKeyboardButton(
                            Languages.get_string(user_language, 'cart'),
                            callback_data="cart"
                        ),
                        types.InlineKeyboardButton(
                            Languages.get_string(user_language, 'to_categories'),
                            callback_data="categories"
                        )
                    )

                    if 'image' in product and product['image']:
                        bot.send_photo(
                            chat_id,
                            photo=product['image'],
                            caption=text,
                            reply_markup=markup
                        )
                    else:
                        bot.send_message(chat_id, text, reply_markup=markup)

                except Exception as e:
                    logger.error(f"Error sending product: {e}")

        # Остальные коллбеки нужно обновить аналогичным образом
        # Пример для "add_" коллбека:
        elif call.data.startswith("add_"):
            _, category_id, product_id = call.data.split("_")
            products = asyncio.run(fetch_products_by_category(category_id))

            if not products:
                bot.answer_callback_query(
                    call.id,
                    Languages.get_string(user_language, 'product_not_found')
                )
                return

            product = next((p for p in products if str(p['id']) == product_id), None)

            if product:
                db.add_to_cart(chat_id, int(product_id), product['name'], product['price'])

                quantity = db.get_item_quantity(chat_id, int(product_id))
                markup = types.InlineKeyboardMarkup(row_width=2)
                markup.add(
                    types.InlineKeyboardButton(
                        Languages.get_string(user_language, 'add_to_cart'),
                        callback_data=f"add_{category_id}_{product_id}"
                    ),
                    types.InlineKeyboardButton(
                        Languages.get_string(user_language, 'remove_from_cart'),
                        callback_data=f"remove_{category_id}_{product_id}"
                    ),
                    types.InlineKeyboardButton(
                        Languages.get_string(user_language, 'cart'),
                        callback_data="cart"
                    ),
                    types.InlineKeyboardButton(
                        Languages.get_string(user_language, 'to_categories'),
                        callback_data="categories"
                    )
                )

                try:
                    bot.edit_message_text(
                        Languages.get_string(user_language, 'product_template').format(
                            product['name'], product['price'], product['currency']
                        ) + Languages.get_string(user_language, 'in_cart').format(quantity),
                        chat_id,
                        message_id,
                        reply_markup=markup
                    )
                except telebot.apihelper.ApiException:
                    pass

                bot.answer_callback_query(
                    call.id,
                    Languages.get_string(user_language, 'product_added').format(product['name'])
                )
            else:
                bot.answer_callback_query(
                    call.id,
                    Languages.get_string(user_language, 'product_not_found')
                )

        # Аналогично обновить коллбеки "remove_", "cart", "clear_cart", "checkout"
        # Полный пример будет слишком объемным для одного артефакта

    except Exception as e:
        logger.error(f"Callback handling error: {e}")
        try:
            bot.answer_callback_query(
                call.id,
                Languages.get_string(user_language, 'error')
            )
        except:
            pass