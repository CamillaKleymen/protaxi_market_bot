import logging
import smtplib
import sqlite3
from datetime import datetime
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from database import db
from buttons import Keyboard

import aiohttp
import asyncio
import requests
import telebot
from config import Config
from telebot import types

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


# global variable => bot token
bot = telebot.TeleBot(Config.API_TOKEN)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ API
async def check_protaxi_id(protaxi_id):
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{Config.CHECK_ID_URL}?id={protaxi_id}") as response:
                if response.status == 200:
                    data = await response.json()
                    return {
                        'success': data.get('success') is True,
                        'balance': data.get('balance', 0)  # Get balance from JSON response
                    }
                return {'success': False, 'balance': 0}
    except Exception as e:
        logger.error(f"Error checking ProTaxi ID: {e}")
        return {'success': False, 'balance': 0}


async def verify_login(protaxi_id, password):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–Ω–∞ —á–µ—Ä–µ–∑ API"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{Config.LOGIN_URL}?id={protaxi_id}&password={password}") as response:
                if response.status == 200:
                    data = await response.json()
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—ä–µ–∫—Ç–∞ success –≤ –æ—Ç–≤–µ—Ç–µ
                    return 'success' in data and isinstance(data['success'], dict)
                return False
    except Exception as e:
        logger.error(f"Error verifying login: {e}")
        return False


# –°—Ç–∞—Ä—Ç –±–æ—Ç–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
@bot.message_handler(commands=['start'])
def start(message):
    try:
        user_id = message.from_user.id
        user = db.get_user(user_id)

        if not user:
            bot.send_message(
                message.chat.id,
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –í–∞—à ProTaxi ID:"
            )
            user_states[user_id] = {'state': 'waiting_for_id'}
            bot.register_next_step_handler(message, process_protaxi_id)
        else:
            show_main_menu(message.chat.id)
    except Exception as e:
        logger.error(f"Start error: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def process_protaxi_id(message):
    try:
        user_id = message.from_user.id
        protaxi_id = message.text.strip()

        result = asyncio.run(check_protaxi_id(protaxi_id))
        if result['success']:
            user_states[user_id] = {
                'state': 'waiting_for_password',
                'protaxi_id': protaxi_id,
                'balance': result['balance']  # Store balance in user_states
            }
            bot.send_message(
                message.chat.id,
                "‚úÖ ID –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:"
            )
            bot.register_next_step_handler(message, process_password)
        else:
            bot.send_message(
                message.chat.id,
                "‚ùå –¢–∞–∫–æ–≥–æ ProTaxi ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID:"
            )
            bot.register_next_step_handler(message, process_protaxi_id)
    except Exception as e:
        logger.error(f"Process ProTaxi ID error: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start —Å–Ω–æ–≤–∞.")


def process_password(message):
    try:
        user_id = message.from_user.id
        if user_id not in user_states:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å –∫–æ–º–∞–Ω–¥—ã /start")
            return

        password = message.text.strip()
        protaxi_id = user_states[user_id]['protaxi_id']

        if asyncio.run(verify_login(protaxi_id, password)):
            if not db.get_user(user_id):
                db.add_user(user_id, protaxi_id, f"ProTaxi_{protaxi_id}")

            del user_states[user_id]

            bot.send_message(
                message.chat.id,
                "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n\n"
                "üõç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
            )
            show_main_menu(message.chat.id)
        else:
            bot.send_message(
                message.chat.id,
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            bot.register_next_step_handler(message, process_password)
    except Exception as e:
        logger.error(f"Process password error: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start —Å–Ω–æ–≤–∞.")


async def get_current_balance(protaxi_id):
    result = await check_protaxi_id(protaxi_id)
    return result['balance']

# API —Ñ—É–Ω–∫—Ü–∏–∏
async def fetch_product_data(url):
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                data = await response.json()
                return data
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å {url}: {response.status}")
                return None


async def fetch_all_products():
    data = await fetch_product_data(Config.PRODUCTS_API_URL)
    return data


def fetch_all_categories():
    try:
        response = requests.get(Config.CATEGORIES_API_URL)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        logger.error(f"Failed to fetch categories: {e}")
        return []


async def fetch_products_by_category(category_id):
    url = f"{Config.PRODUCTS_API_URL}?category_id={category_id}"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    return await response.json()
                logger.error(f"Error fetching products for category {category_id}: {response.status}")
                return None
    except Exception as e:
        logger.error(f"Exception fetching products: {e}")
        return None


# Email —Ñ—É–Ω–∫—Ü–∏–∏
from datetime import datetime

def format_order_email(user_id, cart_items, total):
    user_info = db.get_user(user_id)
    if not user_info:
        return None

    order_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    message_text = f"""
–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{user_id}
–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {order_time}

–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ:
-------------------------
ProTaxi ID: {user_info[1]}

–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:
-------------------------
"""
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–æ—Ä–∑–∏–Ω—ã
    for name, price, quantity in cart_items:
        item_total = price * quantity
        message_text += f"{name.ljust(25)} {str(quantity).rjust(3)} —à—Ç. √ó {str(price).rjust(8)} ProCoin = {str(item_total).rjust(8)} ProCoin\n"

    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞
    message_text += f"\n-------------------------\n–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {str(total).rjust(8)} ProCoin"

    return message_text


def send_order_email(user_id, cart_items, total):
    try:
        msg = MIMEMultipart()
        msg['From'] = Config.EMAIL_HOST_USER
        msg['To'] = Config.EMAIL_RECIPIENT
        msg['Subject'] = f'–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{user_id} –æ—Ç {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}'

        message_text = format_order_email(user_id, cart_items, total)
        if not message_text:
            logger.error(f"Failed to format email for user {user_id}")
            return False

        msg.attach(MIMEText(message_text, 'plain'))

        with smtplib.SMTP(Config.EMAIL_HOST, Config.EMAIL_PORT) as server:
            server.starttls()
            server.login(Config.EMAIL_HOST_USER, Config.EMAIL_HOST_PASSWORD)
            server.send_message(msg)

        logger.info(f"Order email sent successfully for user {user_id}")
        return True
    except Exception as e:
        logger.error(f"Failed to send order email: {e}")
        return False


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def show_main_menu(chat_id):
    try:
        bot.send_message(
            chat_id,
            "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=Keyboard.main_menu()
        )
    except Exception as e:
        logger.error(f"Show main menu error: {e}")
        bot.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    try:
        chat_id = call.message.chat.id
        message_id = call.message.message_id
        user_id = call.from_user.id

        async def get_user_balance(protaxi_id):
            try:
                async with aiohttp.ClientSession() as session:
                    async with session.get(f"{Config.CHECK_ID_URL}?id={protaxi_id}") as response:
                        if response.status == 200:
                            data = await response.json()
                            return data.get('balance', 0)
                        return 0
            except Exception as e:
                logger.error(f"Error getting user balance: {e}")
                return 0

        if call.data == "main_menu":
            try:
                bot.edit_message_text(
                    "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                    chat_id,
                    message_id,
                    reply_markup=Keyboard.main_menu()
                )
            except telebot.apihelper.ApiException:
                bot.send_message(
                    chat_id,
                    "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                    reply_markup=Keyboard.main_menu()
                )

        elif call.data == "categories":
            categories = fetch_all_categories()
            if not categories:
                bot.answer_callback_query(call.id, "üòî –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                return

            markup = types.InlineKeyboardMarkup(row_width=1)
            for category in categories:
                category_button = types.InlineKeyboardButton(
                    category['name'],
                    callback_data=f"show_products_{category['id']}"
                )
                markup.add(category_button)
            markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))

            try:
                bot.edit_message_text(
                    "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                    chat_id,
                    message_id,
                    reply_markup=markup
                )
            except telebot.apihelper.ApiException:
                bot.send_message(
                    chat_id,
                    "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                    reply_markup=markup
                )


        elif call.data.startswith("show_products_"):
            category_id = call.data.split("_")[2]
            products = asyncio.run(fetch_products_by_category(category_id))

            if not products:
                bot.edit_message_text(
                    "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–æ–≤–∞—Ä—ã –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.",
                    chat_id,
                    message_id,
                    reply_markup=Keyboard.main_menu()
                )
                return

            bot.delete_message(chat_id, message_id)

            for product in products:
                try:
                    if 'image' in product and product['image']:
                        text = (f"üì¶ {product['name']}\n"
                                f"üí∞ –¶–µ–Ω–∞: {product['price']} {product['currency']}\n")
                        markup = types.InlineKeyboardMarkup(row_width=2)
                        markup.add(
                            types.InlineKeyboardButton(
                                "‚úÖ –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É",
                                callback_data=f"add_{category_id}_{product['id']}"
                            ),

                            types.InlineKeyboardButton(
                                "üõí –ö–æ—Ä–∑–∏–Ω–∞",
                                callback_data="cart"
                            ),
                            #
                            # types.InlineKeyboardButton(
                            #     "üõí –ö–æ—Ä–∑–∏–Ω–∞",
                            #     callback_data="cart"
                            # ),
                            types.InlineKeyboardButton(
                                "‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥",
                                callback_data="categories"
                            )
                        )

                        bot.send_photo(
                            chat_id,
                            photo=product['image'],
                            caption=text,
                            reply_markup=markup
                        )

                    else:
                        text = (f"üì¶ {product['name']}\n"
                                f"üí∞ –¶–µ–Ω–∞: {product['price']} {product['currency']}\n")

                        markup = types.InlineKeyboardMarkup(row_width=2)
                        markup.add(
                            types.InlineKeyboardButton(
                                "‚úÖ –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É",
                                callback_data=f"add_{category_id}_{product['id']}"
                            ),

                            types.InlineKeyboardButton(
                                "üõí –ö–æ—Ä–∑–∏–Ω–∞",
                                callback_data="cart"
                            ),
                            # types.InlineKeyboardButton(
                            #     "üõí –ö–æ—Ä–∑–∏–Ω–∞",
                            #     callback_data="cart"
                            # ),
                            types.InlineKeyboardButton(
                                "‚óÄÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                                callback_data="categories"
                            )

                        )

                        bot.send_message(chat_id, text, reply_markup=markup)

                except Exception as e:
                    logger.error(f"Error sending product with image: {e}")

                    text = (f"üì¶ {product['name']}\n"
                            f"üí∞ –¶–µ–Ω–∞: {product['price']} {product['currency']}\n")

                    markup = types.InlineKeyboardMarkup(row_width=2)

                    markup.add(
                        types.InlineKeyboardButton(
                            "‚úÖ –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É",
                            callback_data=f"add_{category_id}_{product['id']}"
                        ),

                        types.InlineKeyboardButton(
                            "üõí –ö–æ—Ä–∑–∏–Ω–∞",
                            callback_data="cart"
                        ),

                        types.InlineKeyboardButton(
                            "üõí –ö–æ—Ä–∑–∏–Ω–∞",
                            callback_data="cart"
                        ),
                        types.InlineKeyboardButton(
                            "‚óÄÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                            callback_data="categories"
                        )


                    )

                    bot.send_message(chat_id, text, reply_markup=markup)

        elif call.data.startswith("add_"):
            _, category_id, product_id = call.data.split("_")
            products = asyncio.run(fetch_products_by_category(category_id))

            if not products:
                bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–µ")
                return

            product = next((p for p in products if str(p['id']) == product_id), None)

            if product:
                db.add_to_cart(chat_id, int(product_id), product['name'], product['price'])

                quantity = db.get_item_quantity(chat_id, int(product_id))
                markup = types.InlineKeyboardMarkup(row_width=2)
                markup.add(
                    types.InlineKeyboardButton(
                        "‚úÖ –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É",
                        callback_data=f"add_{category_id}_{product_id}"
                    ),
                    types.InlineKeyboardButton(
                        "‚ùå –£–±—Ä–∞—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã",
                        callback_data=f"remove_{category_id}_{product_id}"
                    ),
                    types.InlineKeyboardButton(
                        "üõí –ö–æ—Ä–∑–∏–Ω–∞",
                        callback_data="cart"
                    ),
                    types.InlineKeyboardButton(
                        "‚óÄÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                        callback_data="categories"
                    )
                )

                try:
                    bot.edit_message_text(
                        f"üì¶ {product['name']}\nüí∞ –¶–µ–Ω–∞: {product['price']} ProCoin\nüõç –í –∫–æ—Ä–∑–∏–Ω–µ: {quantity} —à—Ç.",
                        chat_id,
                        message_id,
                        reply_markup=markup
                    )
                except telebot.apihelper.ApiException:
                    pass

                bot.answer_callback_query(
                    call.id,
                    f"‚úÖ {product['name']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É"
                )
            else:
                bot.answer_callback_query(call.id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")

        elif call.data.startswith("remove_"):
            _, category_id, product_id = call.data.split("_")
            products = asyncio.run(fetch_products_by_category(category_id))

            if not products:
                bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–µ")
                return

            product = next((p for p in products if str(p['id']) == product_id), None)

            if product:
                if db.remove_from_cart(chat_id, int(product_id)):
                    quantity = db.get_item_quantity(chat_id, int(product_id))
                    markup = types.InlineKeyboardMarkup(row_width=2)
                    markup.add(
                        types.InlineKeyboardButton(
                            "‚úÖ –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É",
                            callback_data=f"add_{category_id}_{product_id}"
                        ),
                        types.InlineKeyboardButton(
                            "‚ùå –£–±—Ä–∞—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã",
                            callback_data=f"remove_{category_id}_{product_id}"
                        ),

                    )

                    quantity_text = f"\nüõç –í –∫–æ—Ä–∑–∏–Ω–µ: {quantity} —à—Ç." if quantity > 0 else ""
                    try:
                        bot.edit_message_text(
                            f"üì¶ {product['name']}\nüí∞ –¶–µ–Ω–∞: {product['price']} ProCoin{quantity_text}",
                            chat_id,
                            message_id,
                            reply_markup=markup
                        )
                    except telebot.apihelper.ApiException:
                        pass

                    bot.answer_callback_query(
                        call.id,
                        f"‚úÖ {product['name']} —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"
                    )
                else:
                    bot.answer_callback_query(call.id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ")
            else:
                bot.answer_callback_query(call.id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")

        elif call.data == "cart":
            cart_items = db.get_cart(chat_id)
            if not cart_items:
                try:
                    bot.edit_message_text(
                        "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞",
                        chat_id,
                        message_id,
                        reply_markup=Keyboard.main_menu()
                    )
                except telebot.apihelper.ApiException:
                    bot.send_message(
                        chat_id,
                        "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞",
                        reply_markup=Keyboard.main_menu()
                    )
                return

            cart_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
            total = 0
            for name, price, quantity in cart_items:
                item_total = price * quantity
                total += item_total
                cart_text += f"‚Ä¢ {name}\n  {quantity} √ó {price} = {item_total} ProCoin\n"
            cart_text += f"\nüí∞ –ò—Ç–æ–≥–æ: {total} ProCoin"

            markup = types.InlineKeyboardMarkup(row_width=1)
            markup.add(
                types.InlineKeyboardButton("üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout"),
                types.InlineKeyboardButton("‚ôª –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart"),
                types.InlineKeyboardButton("‚óÄÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏", callback_data="categories")
            )

            try:
                bot.edit_message_text(
                    cart_text,
                    chat_id,
                    message_id,
                    reply_markup=markup
                )
            except telebot.apihelper.ApiException:
                bot.send_message(
                    chat_id,
                    cart_text,
                    reply_markup=markup
                )

        elif call.data == "clear_cart":
            db.clear_cart(chat_id)
            try:
                bot.edit_message_text(
                    "üóë –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!",
                    chat_id,
                    message_id,
                    reply_markup=Keyboard.main_menu()
                )
            except telebot.apihelper.ApiException:
                bot.send_message(
                    chat_id,
                    "üóë –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!",
                    reply_markup=Keyboard.main_menu()
                )

        elif call.data == "checkout":
            cart_items = db.get_cart(chat_id)
            if not cart_items:
                bot.answer_callback_query(call.id, "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
                return

            total = sum(item[1] * item[2] for item in cart_items)

            user_info = db.get_user(user_id)
            if not user_info:
                bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return

            protaxi_id = user_info[1]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_balance = asyncio.run(get_user_balance(protaxi_id))

            if total > user_balance:
                bot.answer_callback_query(call.id)
                bot.edit_message_text(
                    "‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–≤–∞—Ä—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n\n"
                    f"–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {total} ProCoin\n"
                    f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance} ProCoin",
                    chat_id,
                    message_id,
                    reply_markup=types.InlineKeyboardMarkup().add(
                        types.InlineKeyboardButton("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data="cart")
                    )
                )
                return

            if send_order_email(chat_id, cart_items, total):
                db.clear_cart(chat_id)
                try:
                    bot.edit_message_text(
                        "‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n"
                        "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                        chat_id,
                        message_id,
                        reply_markup=Keyboard.main_menu()
                    )
                except telebot.apihelper.ApiException:
                    bot.send_message(
                        chat_id,
                        "‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n"
                        "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                        reply_markup=Keyboard.main_menu()
                    )
            else:
                bot.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    chat_id,
                    message_id,
                    reply_markup=Keyboard.main_menu()
                )

    except Exception as e:
        logger.error(f"Callback handling error: {e}")
        try:
            bot.answer_callback_query(
                call.id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
        except:
            pass

    def main():
        urls = [
            "https://protaxi-market.uz/module/shop/api/get-all-products"
        ]
        results = asyncio.run(fetch_all_products())

        for result in results:
            if result is not None:
                print(result)

if __name__ == "__main__":
    bot.polling(none_stop=True)